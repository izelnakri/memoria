- move to 4 packages? then its harder to use in project: @memserver/cli @memserver/server @memserver/model @memserver/response
- move to 2 packages? : @memserver/cli @memserver
- move to github actions
- add release-it/auto CHANGELOG
- remove qs?
- move @ember/string to emberx/string
- investigate decorator validations
- maybe a more in-depth serializer

through embroider create a local ember-packages and wire them to memserver with right module names

maybe remove require.caches for tests

JS needs pipeline operator(|>) and cheap Rust bindings(JS<->Rust) and runtimes need to have ava API as default testing API(test.serial, test etc)

- investigate silent Errors within MemServer.Server handler context
- make passthrough PASS
- add initializer.js
- memserver command shows options + loader + memserver browserify [dist] creates memserver.dist.js
- non-json request/responses? - just kidding... or do I?!?
- rollup -i ./lib/response.js -o response.js -f cjs
- memserver glue [jsonEndpoint]

// relationships declaration

import { cast, validateLength, validateRequired, foreignKeyConstraint } from 'memserver/changeset'; // instead use class-validator
import { from } from 'memserver/query';


// MODEL API:
import Model from 'memserver/model';

class User extends Model {
  Adapter: MemoryAdapter, // or SQLAdapter, JSONAPIAdapter, JSONAdapter, GraphQLAdapter
  Serializer: ModelSerializer // or JSONSerializer, JSONAPISerializer, GraphQLSerializer

  primaryKey = 'id' // or uuid or function(?)

  insert(options) {

  }
  update(options) {

  }
  delete(options) {

  }
  serializer(userOrUsers) {

  }
  serialize(user) {

  }
  resetDatabase(targetInitialState: object[]) {

  }

  // Model Query Interface:
  find(idOrIds) {

  }
  findBy(options) {

  }
  findAll(options) {

  }
  count(options) { // in memory, or in the resource through adapter with options?

  }

  // Extra examples: customAPIActions:
  confirm = APIAction({
    type: 'POST',
    before() {

    },
    after() {

    }
  })


  // private API: attributes, DB, defaultAttributes(string or lazy(with functions)) in future maybe as prop or decorator etc
  // maybe default App or DB validations expressed as decorators
}
Sketch:
User.insert({});

User { emails: hasManyProxy{}, firstName: 'Izel', lastName: 'Nakri' }

user.emails.then((emails) => {});

User.Adapter [sql, jsonapi, json, memory] , includes Repo reference, Repo setting at the beginning, synchronization strategies(later stage)
User.Serializer

User.findBy({}); => request

import { from, where, join, leftJoin, innerJoin } from 'memserver/query';

from()

Repo.one(query);
Repo.all(
